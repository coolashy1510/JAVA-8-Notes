Interface: Any requirement specification

Implementing an interface:
 - we shud implement every method, or declare it as abstract.
 - we must have methods as public.

- A class can extend only one class at a time
- An interface can extend any number of interfaces at a time
- A class can implement any number of interfaces
- A class can extend another class and can implement any number of instances simultaneously.

A extends B :- A and B can be class or interface
A extends B,C :- Interfaces
A implements B,C :- A--> class B,C--> interfaces
A extends B implements C,D :- A,B --> classes C,D --> interfaces.
A implements C,D extends B :- Compiler Error (First we should use extends and then only we can use implements)

Inheritance:
Extends means parent to child. (we are getting something from parent)
Implements means child to parent. (we have to give something to parent)

Interface methods:
  - every method present inside an interface is always public and abstract whether we are declaring or not.
  - if we dont mention anything it is considered as public.
  
Interface variables:
  - REQUIREMENT LEVEL CONSTANTS.
  - every variable present inside interface, is always public, static and final [[all together too]]
  - we need to perform initialisiation as they are static and final. Eg: int x = 10;

Interface naming conflicts:
# If two interface methods contain same method signature with same return type, then one method implementation is enough.
# If two interface methods contain same method signature with same return type, and if we need different implementation, then we need to have different classes implementing the interfaces.
# 2 interfaces, same name and different argument types, we need to provide different implementations -> overloaded methods.
# 
