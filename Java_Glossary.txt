Java 8 : Preparation towards Certification 1Z0 808.

Duration : 2 1/5 hrs
No of Questions :70 qns
Pass percentage: 65%

- Inside JVM - Bytecode verifier ---> to check whether the byte code generated by the compiler is valid or not.
- Encapsulation --> Security
- Inheritance   --> Reusability
- Polymorphism  --> Flexibility

*** Java Features ***
Whats best about Java ? - Chance of failure in JAVA platform/language is very less.
#1 Robust -- Chance fo failure is rare.
  Why? - Type Checking while compiling checked by compiler.
#2 Garbage Collection -- To Destroy Objects - MEMORY RELATED PROBLEMS
#3 Exception Handling. (Catch block during errors)
#4 Platform Independent - Write once and run anywhere.
#5 Architecture Neutral - change in any of the hardware accesories does not have an impact on the programs.!
#6 Portability - Without performing any change to the program i can implement the same in windows, linux etc..
#7 OOP - Everything is object in Java
******************
#8  Multi threaded - 
#9  Compiled and Interpreted - 
#10 High Performance - 
#11 Distributed - 
#12 Dynamic - 

1) Java Compiler - javac filename.java ==> byte code is generated (filename.class) - byte code is platform independent ==> JVM is platform dependent
2) JDK - Java Development Kit - provides environment to develop and run java applications
	JRE - Java Runtime Environment - provides environment just to run the java applications
	 JVM - Java Virtual Machine - its an intrepretor - available inside JRE, responsible to run java program line-by-line

------------------------------------------------------------------------------------------------------------------------------    JDK <===inside=== JRE + development tools(java compiler, java debugger) <===inside=== JVM + several library classes 
------------------------------------------------------------------------------------------------------------------------------
##### Chapter 1 #####
---------------------
Data types & Literals:

 ***Data Type***

[:Signed Datatypes:] Eg: int x= +10 or float y= -12.5
Numeric:																		

Integral data types - without decimal points - default int
	byte  - 1 byte - 8 bits	= -128 to +127 / -2^7 to 2^7 -1
	short - 2 byte - 16 bits	= -2^15 to 2^15 -1
	int   - 4 byte - 32 bits	= -2^31 to 2^31 -1
	long  - 8 byte - 64 bits	= -2^63	to 2^63 -1

Floating point data types - with decimal points - default double
  floating point data types are used based on accuracy levels.
	float  - -3.4e38 to 3.4e38
	double - -1.7e308 to 1.7e308

[:Non Signed Datatypes:] boolean x = false or char y = 'a'
Non Numeric:
	char - 2 byte - 16 bits - java is unicode
	boolean - not applicable - varies from JVM to JVM

1 - negative
0 - positive

1 byte = 8 bit ===> |X|1|1|1|1|1|1|1| --> x is reserved space for 'sign' - it implies (+)ve or (-)ve
					 ...........2^1 2^0
					 -128 (-2^7) to +127(2^7 -1)

In java Garbage values are not there. JVM will provide default values for the data types.
eg: datatype = default value;
	
	int = 0;
	float = 0.0;
	boolean = false;
	String = null;
	char = ; (blank space)

ASCI Code ---> 
	A =====> 65
	a =====> 97

   	- a constant value which can be assigned to a variable

For Integral data types:
 Decimal (Base-10) ====> 0-9 --- Eg: int x=12;
 Octal (Base-7) ====> 0-7 --- Eg: int x=012; (prefix with 0)
 Hexa Decimal (Base-16) ====> 0-9, a-f/A-F --- Eg: int x=0x10; (prefix with 0x or 0X) [can be lower of uppercase]
 
For Floating Data types:
 Decimal (Base-10) ====> 0-9 --- Eg: double d = 123.456
 No octal and hexa decimal 
 Exponential Form - 
 	double d = 1.2e3;  ( 1.2 x 10^3 )
 	float ff = 1.2e3f;

***ARRAYS***
An array is an indexed collection of fixed number of homogeneous data elements.

1 dimensional:
eg: 
int[] x; ---- recommended for readability
int x[];
int []x;
int x   [];

2 dimensional:
eg:
int[][] x;
int  [][]x;
int x [][];
int[] x[];
int []  []x;
int   []x[];

3 dimensional:
int[][][] x;
all possible combinations are allowed.

Max array size in Java - long datatype length

---- classname@hashcode_in_hexadecimalForm ----
int[] x = {1,2,3,4,5};
length() = 
length = int[], double[], String[]
length() = String buffer and builder. String related objects

Anonymous arrays: arrays for instant use. nameless arrays. 

All the wrapper classes implement the interfaces java.io.Serializable and java.lang.Comparable

####Types of Variables:####
	- primitive variable 
	- reference variable - to refer objects

		- local variable - inside method, block or constructors. 
		- static variable - if the value of a variable is not varied from object to object. "static"--> keyword is used
		- instance variable - object level variables; stored in heap area

	For local variable initialisation is must.
	For static and instance variable compiler will provide values.
	Never recommended to initialize local variable inside logical blocks.

Diff b/w instance and static variable:
- Both will be within the class. But using static keyword we can differentiate the variable.

"class level" means static fields and they can be accessed from anywhere (i.e. static as well as non-static methods) in the class (and from outside the class depending on their accessibility).
"instance level" means the instance fields and they can be accessed only from instance methods in the class.

1. JVM will be started.
2. JVM will create and start main thread.
3. Main thread will search for <SomeName>.class file. --> NoClassDefFoundError
4. If <SomeName>.class file is available, then it is loaded [static variables will be created]
5. Execute Main method in the file.
6. Unload <SomeName>.class file [static variables will be destroyed]
7. Terminate the main thread.  
8. JVM will be shutdown.

static --> used in variables, methods and inner classes. cannot make top level classes as static.
final  --> cannot create child class. no inheritance. class level.
public --> all other class can access. inheritance concept works here. 

static variables can be accessed from anywhere.
instance variables will be accessed ly inside instance methods. else we need an object creation to access it. it cannot be accessed directly inside static block

For static methods, method declaration is necessary with body. [static mehtods means class level utility methods. so it needs body declaration.]
Abstract methods must end with semicolon without body.

***** Parameter Parsing ******
primitive variable --> method 

public - jvm must be able to call from anywhere;
static - without any object, the JVM has to call the main method;  
void   - no return from the method with JVM
main   - it is the method configured inside JVM.


Operators and Assignments:
-------------------------
ternary operator - ?:      ===> x=(b)?c:d     (true:false)
for this number of ? and : must match.

== operator and .equals() method
== meant for reference/address comparison
.equals() present inside String is meant for content comparison.

increment and decrement operators:
---------------------------------
++x --> pre increment - first increment x and then assign the value
x++ --> post increment - first assign the value and then increment x

--x --> pre increment - first decrement x and then assign the value
x-- --> post increment - first assign the value and then decrement x

it is not applicable to boolean datatype. Applicable for all the primitive datatypes.

arithmetic operators: 
--------------------

+,-,*,/ and %

10/0, 0/0 is Arithmetic exception(AE)
10/0.0 is infinity
0/0.0 is NaN

AE is applicable only for integral datatypes and not for Floating datatypes - Runtime Exception

String Concatenation Operator: +
-----------------------------
Java does not support operator overriding

Relational Operator:
-------------------
<,<=,>,>=
can be applied to any type except boolean.
nesting of relational operator is not allowed.

Flow Control:
------------

- Selection statements: among everal available options, pick one option and execute. Eg: If-Else and Switch statements
- Iterative Statements: while , do-while(), for, for-each statements
- Transfer statements: break, continue, return, try-catch-finally, assert

	Break: [can be used only in 3 places]
	- inside switch statements to stop fall through
	- inside loops to break loop execution based on condition
	- inside labeled blocks to break block execution

		labelled block: redability purpose; declare inside a method; 
		instance block: declare inside class directly. will be EXECUTED automatically.

	Continue: [can be used only in 1 place]
	- Used only inside loops. 
	- it is used to skip current iteration and continue next iteration.

loop comparison:
---------------

--> If we dont know the number of iteration in advance then use while loop.
--> If we want to exexcute loop body atleast once then use do-while loop
--> If we know the number of iterations in advance then use for loop
--> To retrive the elements of arrays and collections then we shud use for-each loop.

Java Source File Structure:
--------------------------
- import statements
- package statements:
- access modifiers (public, protected, default, private)
- abstract modifier
- interface

++++ a program can have many classes but If there is a public class, then compulsary, name of the class shud be that filename ++++
If no public class is there, then the filename name can be anything.

import statements:
	- use fully qualified names (or) use import statements
	1. Explicit class import:
	Eg:
	 - import java.util.ArrayList;

	2. Implicit Class import:
	Eg:
	 - import java.util.*;

	 which are meaningful:
	 import java.util.ArrayList; - Yes
	 import java.util.*; - Yes
	 import java.util.ArrayList.*; -No
	 import java.util; -No

order of precedence:
- explicit class import
- current working directory
- implicit class import

default packages:
1. lang package
2. default package ==> cwd

Whenever we import a package, all classes and interfaces present in the package, by default is available. "BUT NOT SUB PACKAGE CLASSES". If we want to use a sub package class, then we must write an import statement. Eg: Pattern class from regex package. import java.util.regex.*;

In C language #include is loaded statically. In java the import is loaded dynamically.

Package Statements:
------------------
it is an encapsulation mechanism to group related things into a single unit.

all classes and interface used for database operation is in ==> java.sql package
file i/o operations ==> java.io package

adv of package statement:
 - modularity of application is improved
 - naming conflicts will be resolved, unique identification
 - security for the components.
 
--> package statement must be the first non-comment statement in any program. 
--> there can be only one package statement in any java program

order of statements in a program:
- package statement
- import statement
- class or interface or enum declarations

Class Level Modifiers:
---------------------
- public
- final - not allowed to create child class
- abstract - object creation is not possible

========================================================
class Test
{
	class inner
	{

	}
}
					Top level class 	inner class 		
public			-       Yes 				yes
<default>		- 		Yes 				yes
private										yes
protected									yes
static 										yes
abstract        - 		Yes 				yes
strictfp		- 		Yes 				yes
final 			-		Yes 				yes
synchronised
native
volatile
transient
========================================================

** In java there is no access specifier concept but we have only in access modifiers.

public:
------
	- this class can be access from anywhere within or outside the package.

default:
-------
	- no access modifier attached to a class then it is default modifier.
	- it is also known as package level access. all classes can be achieved without any further queries.

final:
-----
	- it is applicable for classes, methods and variables.
	- no change in values.
	- final methods cannot be overridden in child class
	- if a class is declared as final we cannot create child class.
	- immutable is aplicable only for object
	- final is applicable for variable, methods and concepts.

abstract:
--------
	- applicable for class and methods and not for variables.

	abstract method: [hiding something]
					- only declaration but no implementation(no body). it must compulsory end with semi-colon;
					- the child class that extends the parent class must provide implementation.
					- it is used for polymorphism purpose.
					- will not go well with final, synchronized, static, private, strictfp

	abstract class: 
					- partially implemented abstract methods is called abstract class.
					- not possible to create an object for abstract class. 

	abstract class vs abstract method:
		- if a class has atleast one abstract method, then we must declare that class as abstract.


protected:
---------
	- refer github separate file.

interface:
---------
	- any service requirement specification is an interface.
	  example JDBC API (interface - requirement specification) --> implemented by --> Oracle driver, MySQL driver, DB2 Driver 
	- it acts as a contract between client and service provider.
	- from 1.8 we can have default methods with implementation; we can have static methods inside the interface.
	- interface keyword.
	- shud end with semicolon ;

	extends and implements:
	''''''''''''''''''''''
	- a class can extend only one class at a time.
	- a class can implement any number of interfaces at a time.
	- a class can extend and implements any number of interfaces at a time.
	- an interface can extend any number of interfaces at a time.

	Marker interface: an interface without any methods and by implementing that interface if our objects will get some ability then it is called marker 		''''''''''''''''  interface. like for serilizable(I), clonable(I), RandomAccess(I), SingleThreadModel.

	1.8 version --> 1. default methods - 
					2. static methods

	stream() method in collection. it is a default method.
